# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libsubsets
else:
    import _libsubsets

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsubsets.delete_SwigPyIterator

    def value(self):
        return _libsubsets.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsubsets.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsubsets.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsubsets.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsubsets.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsubsets.SwigPyIterator_copy(self)

    def next(self):
        return _libsubsets.SwigPyIterator_next(self)

    def __next__(self):
        return _libsubsets.SwigPyIterator___next__(self)

    def previous(self):
        return _libsubsets.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsubsets.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsubsets.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsubsets.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsubsets.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsubsets.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsubsets.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsubsets.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libsubsets:
_libsubsets.SwigPyIterator_swigregister(SwigPyIterator)

class MyVector_u64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsubsets.MyVector_u64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsubsets.MyVector_u64___nonzero__(self)

    def __bool__(self):
        return _libsubsets.MyVector_u64___bool__(self)

    def __len__(self):
        return _libsubsets.MyVector_u64___len__(self)

    def __getslice__(self, i, j):
        return _libsubsets.MyVector_u64___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsubsets.MyVector_u64___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsubsets.MyVector_u64___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsubsets.MyVector_u64___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsubsets.MyVector_u64___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsubsets.MyVector_u64___setitem__(self, *args)

    def pop(self):
        return _libsubsets.MyVector_u64_pop(self)

    def append(self, x):
        return _libsubsets.MyVector_u64_append(self, x)

    def empty(self):
        return _libsubsets.MyVector_u64_empty(self)

    def size(self):
        return _libsubsets.MyVector_u64_size(self)

    def swap(self, v):
        return _libsubsets.MyVector_u64_swap(self, v)

    def begin(self):
        return _libsubsets.MyVector_u64_begin(self)

    def end(self):
        return _libsubsets.MyVector_u64_end(self)

    def rbegin(self):
        return _libsubsets.MyVector_u64_rbegin(self)

    def rend(self):
        return _libsubsets.MyVector_u64_rend(self)

    def clear(self):
        return _libsubsets.MyVector_u64_clear(self)

    def get_allocator(self):
        return _libsubsets.MyVector_u64_get_allocator(self)

    def pop_back(self):
        return _libsubsets.MyVector_u64_pop_back(self)

    def erase(self, *args):
        return _libsubsets.MyVector_u64_erase(self, *args)

    def __init__(self, *args):
        _libsubsets.MyVector_u64_swiginit(self, _libsubsets.new_MyVector_u64(*args))

    def push_back(self, x):
        return _libsubsets.MyVector_u64_push_back(self, x)

    def front(self):
        return _libsubsets.MyVector_u64_front(self)

    def back(self):
        return _libsubsets.MyVector_u64_back(self)

    def assign(self, n, x):
        return _libsubsets.MyVector_u64_assign(self, n, x)

    def resize(self, *args):
        return _libsubsets.MyVector_u64_resize(self, *args)

    def insert(self, *args):
        return _libsubsets.MyVector_u64_insert(self, *args)

    def reserve(self, n):
        return _libsubsets.MyVector_u64_reserve(self, n)

    def capacity(self):
        return _libsubsets.MyVector_u64_capacity(self)
    __swig_destroy__ = _libsubsets.delete_MyVector_u64

# Register MyVector_u64 in _libsubsets:
_libsubsets.MyVector_u64_swigregister(MyVector_u64)

class MyVector_u32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsubsets.MyVector_u32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsubsets.MyVector_u32___nonzero__(self)

    def __bool__(self):
        return _libsubsets.MyVector_u32___bool__(self)

    def __len__(self):
        return _libsubsets.MyVector_u32___len__(self)

    def __getslice__(self, i, j):
        return _libsubsets.MyVector_u32___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsubsets.MyVector_u32___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsubsets.MyVector_u32___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsubsets.MyVector_u32___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsubsets.MyVector_u32___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsubsets.MyVector_u32___setitem__(self, *args)

    def pop(self):
        return _libsubsets.MyVector_u32_pop(self)

    def append(self, x):
        return _libsubsets.MyVector_u32_append(self, x)

    def empty(self):
        return _libsubsets.MyVector_u32_empty(self)

    def size(self):
        return _libsubsets.MyVector_u32_size(self)

    def swap(self, v):
        return _libsubsets.MyVector_u32_swap(self, v)

    def begin(self):
        return _libsubsets.MyVector_u32_begin(self)

    def end(self):
        return _libsubsets.MyVector_u32_end(self)

    def rbegin(self):
        return _libsubsets.MyVector_u32_rbegin(self)

    def rend(self):
        return _libsubsets.MyVector_u32_rend(self)

    def clear(self):
        return _libsubsets.MyVector_u32_clear(self)

    def get_allocator(self):
        return _libsubsets.MyVector_u32_get_allocator(self)

    def pop_back(self):
        return _libsubsets.MyVector_u32_pop_back(self)

    def erase(self, *args):
        return _libsubsets.MyVector_u32_erase(self, *args)

    def __init__(self, *args):
        _libsubsets.MyVector_u32_swiginit(self, _libsubsets.new_MyVector_u32(*args))

    def push_back(self, x):
        return _libsubsets.MyVector_u32_push_back(self, x)

    def front(self):
        return _libsubsets.MyVector_u32_front(self)

    def back(self):
        return _libsubsets.MyVector_u32_back(self)

    def assign(self, n, x):
        return _libsubsets.MyVector_u32_assign(self, n, x)

    def resize(self, *args):
        return _libsubsets.MyVector_u32_resize(self, *args)

    def insert(self, *args):
        return _libsubsets.MyVector_u32_insert(self, *args)

    def reserve(self, n):
        return _libsubsets.MyVector_u32_reserve(self, n)

    def capacity(self):
        return _libsubsets.MyVector_u32_capacity(self)
    __swig_destroy__ = _libsubsets.delete_MyVector_u32

# Register MyVector_u32 in _libsubsets:
_libsubsets.MyVector_u32_swigregister(MyVector_u32)

class MyVector_u16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsubsets.MyVector_u16_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsubsets.MyVector_u16___nonzero__(self)

    def __bool__(self):
        return _libsubsets.MyVector_u16___bool__(self)

    def __len__(self):
        return _libsubsets.MyVector_u16___len__(self)

    def __getslice__(self, i, j):
        return _libsubsets.MyVector_u16___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsubsets.MyVector_u16___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsubsets.MyVector_u16___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsubsets.MyVector_u16___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsubsets.MyVector_u16___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsubsets.MyVector_u16___setitem__(self, *args)

    def pop(self):
        return _libsubsets.MyVector_u16_pop(self)

    def append(self, x):
        return _libsubsets.MyVector_u16_append(self, x)

    def empty(self):
        return _libsubsets.MyVector_u16_empty(self)

    def size(self):
        return _libsubsets.MyVector_u16_size(self)

    def swap(self, v):
        return _libsubsets.MyVector_u16_swap(self, v)

    def begin(self):
        return _libsubsets.MyVector_u16_begin(self)

    def end(self):
        return _libsubsets.MyVector_u16_end(self)

    def rbegin(self):
        return _libsubsets.MyVector_u16_rbegin(self)

    def rend(self):
        return _libsubsets.MyVector_u16_rend(self)

    def clear(self):
        return _libsubsets.MyVector_u16_clear(self)

    def get_allocator(self):
        return _libsubsets.MyVector_u16_get_allocator(self)

    def pop_back(self):
        return _libsubsets.MyVector_u16_pop_back(self)

    def erase(self, *args):
        return _libsubsets.MyVector_u16_erase(self, *args)

    def __init__(self, *args):
        _libsubsets.MyVector_u16_swiginit(self, _libsubsets.new_MyVector_u16(*args))

    def push_back(self, x):
        return _libsubsets.MyVector_u16_push_back(self, x)

    def front(self):
        return _libsubsets.MyVector_u16_front(self)

    def back(self):
        return _libsubsets.MyVector_u16_back(self)

    def assign(self, n, x):
        return _libsubsets.MyVector_u16_assign(self, n, x)

    def resize(self, *args):
        return _libsubsets.MyVector_u16_resize(self, *args)

    def insert(self, *args):
        return _libsubsets.MyVector_u16_insert(self, *args)

    def reserve(self, n):
        return _libsubsets.MyVector_u16_reserve(self, n)

    def capacity(self):
        return _libsubsets.MyVector_u16_capacity(self)
    __swig_destroy__ = _libsubsets.delete_MyVector_u16

# Register MyVector_u16 in _libsubsets:
_libsubsets.MyVector_u16_swigregister(MyVector_u16)

class MyVector_u8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsubsets.MyVector_u8_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsubsets.MyVector_u8___nonzero__(self)

    def __bool__(self):
        return _libsubsets.MyVector_u8___bool__(self)

    def __len__(self):
        return _libsubsets.MyVector_u8___len__(self)

    def __getslice__(self, i, j):
        return _libsubsets.MyVector_u8___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsubsets.MyVector_u8___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsubsets.MyVector_u8___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsubsets.MyVector_u8___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsubsets.MyVector_u8___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsubsets.MyVector_u8___setitem__(self, *args)

    def pop(self):
        return _libsubsets.MyVector_u8_pop(self)

    def append(self, x):
        return _libsubsets.MyVector_u8_append(self, x)

    def empty(self):
        return _libsubsets.MyVector_u8_empty(self)

    def size(self):
        return _libsubsets.MyVector_u8_size(self)

    def swap(self, v):
        return _libsubsets.MyVector_u8_swap(self, v)

    def begin(self):
        return _libsubsets.MyVector_u8_begin(self)

    def end(self):
        return _libsubsets.MyVector_u8_end(self)

    def rbegin(self):
        return _libsubsets.MyVector_u8_rbegin(self)

    def rend(self):
        return _libsubsets.MyVector_u8_rend(self)

    def clear(self):
        return _libsubsets.MyVector_u8_clear(self)

    def get_allocator(self):
        return _libsubsets.MyVector_u8_get_allocator(self)

    def pop_back(self):
        return _libsubsets.MyVector_u8_pop_back(self)

    def erase(self, *args):
        return _libsubsets.MyVector_u8_erase(self, *args)

    def __init__(self, *args):
        _libsubsets.MyVector_u8_swiginit(self, _libsubsets.new_MyVector_u8(*args))

    def push_back(self, x):
        return _libsubsets.MyVector_u8_push_back(self, x)

    def front(self):
        return _libsubsets.MyVector_u8_front(self)

    def back(self):
        return _libsubsets.MyVector_u8_back(self)

    def assign(self, n, x):
        return _libsubsets.MyVector_u8_assign(self, n, x)

    def resize(self, *args):
        return _libsubsets.MyVector_u8_resize(self, *args)

    def insert(self, *args):
        return _libsubsets.MyVector_u8_insert(self, *args)

    def reserve(self, n):
        return _libsubsets.MyVector_u8_reserve(self, n)

    def capacity(self):
        return _libsubsets.MyVector_u8_capacity(self)
    __swig_destroy__ = _libsubsets.delete_MyVector_u8

# Register MyVector_u8 in _libsubsets:
_libsubsets.MyVector_u8_swigregister(MyVector_u8)

class MyVector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsubsets.MyVector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsubsets.MyVector_int___nonzero__(self)

    def __bool__(self):
        return _libsubsets.MyVector_int___bool__(self)

    def __len__(self):
        return _libsubsets.MyVector_int___len__(self)

    def __getslice__(self, i, j):
        return _libsubsets.MyVector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsubsets.MyVector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsubsets.MyVector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsubsets.MyVector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsubsets.MyVector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsubsets.MyVector_int___setitem__(self, *args)

    def pop(self):
        return _libsubsets.MyVector_int_pop(self)

    def append(self, x):
        return _libsubsets.MyVector_int_append(self, x)

    def empty(self):
        return _libsubsets.MyVector_int_empty(self)

    def size(self):
        return _libsubsets.MyVector_int_size(self)

    def swap(self, v):
        return _libsubsets.MyVector_int_swap(self, v)

    def begin(self):
        return _libsubsets.MyVector_int_begin(self)

    def end(self):
        return _libsubsets.MyVector_int_end(self)

    def rbegin(self):
        return _libsubsets.MyVector_int_rbegin(self)

    def rend(self):
        return _libsubsets.MyVector_int_rend(self)

    def clear(self):
        return _libsubsets.MyVector_int_clear(self)

    def get_allocator(self):
        return _libsubsets.MyVector_int_get_allocator(self)

    def pop_back(self):
        return _libsubsets.MyVector_int_pop_back(self)

    def erase(self, *args):
        return _libsubsets.MyVector_int_erase(self, *args)

    def __init__(self, *args):
        _libsubsets.MyVector_int_swiginit(self, _libsubsets.new_MyVector_int(*args))

    def push_back(self, x):
        return _libsubsets.MyVector_int_push_back(self, x)

    def front(self):
        return _libsubsets.MyVector_int_front(self)

    def back(self):
        return _libsubsets.MyVector_int_back(self)

    def assign(self, n, x):
        return _libsubsets.MyVector_int_assign(self, n, x)

    def resize(self, *args):
        return _libsubsets.MyVector_int_resize(self, *args)

    def insert(self, *args):
        return _libsubsets.MyVector_int_insert(self, *args)

    def reserve(self, n):
        return _libsubsets.MyVector_int_reserve(self, n)

    def capacity(self):
        return _libsubsets.MyVector_int_capacity(self)
    __swig_destroy__ = _libsubsets.delete_MyVector_int

# Register MyVector_int in _libsubsets:
_libsubsets.MyVector_int_swigregister(MyVector_int)

class DenseSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_libsubsets.DenseSet_n_get, _libsubsets.DenseSet_n_set)
    data = property(_libsubsets.DenseSet_data_get, _libsubsets.DenseSet_data_set)

    def __init__(self, *args):
        _libsubsets.DenseSet_swiginit(self, _libsubsets.new_DenseSet(*args))

    def copy(self):
        return _libsubsets.DenseSet_copy(self)

    def free(self):
        return _libsubsets.DenseSet_free(self)

    def reset(self):
        return _libsubsets.DenseSet_reset(self)

    def save_to_file(self, filename):
        return _libsubsets.DenseSet_save_to_file(self, filename)

    @staticmethod
    def load_from_file(filename):
        return _libsubsets.DenseSet_load_from_file(filename)

    def get_hash(self):
        return _libsubsets.DenseSet_get_hash(self)

    def info(self, name=None):
        return _libsubsets.DenseSet_info(self, name)

    def log_info(self, name=None):
        return _libsubsets.DenseSet_log_info(self, name)

    def get(self, x):
        return _libsubsets.DenseSet_get(self, x)

    def set(self, *args):
        return _libsubsets.DenseSet_set(self, *args)

    def __ior__(self, b):
        return _libsubsets.DenseSet___ior__(self, b)

    def __ixor__(self, b):
        return _libsubsets.DenseSet___ixor__(self, b)

    def __iand__(self, b):
        return _libsubsets.DenseSet___iand__(self, b)

    def __isub__(self, b):
        return _libsubsets.DenseSet___isub__(self, b)

    def get_head_fixed(self, h, value):
        return _libsubsets.DenseSet_get_head_fixed(self, h, value)

    def get_support(self):
        return _libsubsets.DenseSet_get_support(self)

    def get_weight(self):
        return _libsubsets.DenseSet_get_weight(self)

    def get_counts_by_weight(self):
        return _libsubsets.DenseSet_get_counts_by_weight(self)

    def do_Mobius(self, *args):
        return _libsubsets.DenseSet_do_Mobius(self, *args)

    def do_Complement(self):
        return _libsubsets.DenseSet_do_Complement(self)

    def do_Not(self, *args):
        return _libsubsets.DenseSet_do_Not(self, *args)

    def do_UpperSet(self, *args):
        return _libsubsets.DenseSet_do_UpperSet(self, *args)

    def do_LowerSet(self, *args):
        return _libsubsets.DenseSet_do_LowerSet(self, *args)

    def do_MinSet(self, *args):
        return _libsubsets.DenseSet_do_MinSet(self, *args)

    def do_MaxSet(self, *args):
        return _libsubsets.DenseSet_do_MaxSet(self, *args)

    def do_DivCore(self, *args):
        return _libsubsets.DenseSet_do_DivCore(self, *args)

    def do_ComplementU2L(self, *args):
        return _libsubsets.DenseSet_do_ComplementU2L(self, *args)

    def do_ComplementL2U(self, *args):
        return _libsubsets.DenseSet_do_ComplementL2U(self, *args)

    def do_UpperSet_Up1(self, *args):
        return _libsubsets.DenseSet_do_UpperSet_Up1(self, *args)
    __swig_destroy__ = _libsubsets.delete_DenseSet

# Register DenseSet in _libsubsets:
_libsubsets.DenseSet_swigregister(DenseSet)

def DenseSet_load_from_file(filename):
    return _libsubsets.DenseSet_load_from_file(filename)



