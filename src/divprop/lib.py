# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _lib
else:
    import _lib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _lib.delete_SwigPyIterator

    def value(self):
        return _lib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _lib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _lib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _lib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _lib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _lib.SwigPyIterator_copy(self)

    def next(self):
        return _lib.SwigPyIterator_next(self)

    def __next__(self):
        return _lib.SwigPyIterator___next__(self)

    def previous(self):
        return _lib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _lib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _lib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _lib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _lib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _lib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _lib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _lib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _lib:
_lib.SwigPyIterator_swigregister(SwigPyIterator)

class MyVector_u64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _lib.MyVector_u64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lib.MyVector_u64___nonzero__(self)

    def __bool__(self):
        return _lib.MyVector_u64___bool__(self)

    def __len__(self):
        return _lib.MyVector_u64___len__(self)

    def __getslice__(self, i, j):
        return _lib.MyVector_u64___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _lib.MyVector_u64___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _lib.MyVector_u64___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _lib.MyVector_u64___delitem__(self, *args)

    def __getitem__(self, *args):
        return _lib.MyVector_u64___getitem__(self, *args)

    def __setitem__(self, *args):
        return _lib.MyVector_u64___setitem__(self, *args)

    def pop(self):
        return _lib.MyVector_u64_pop(self)

    def append(self, x):
        return _lib.MyVector_u64_append(self, x)

    def empty(self):
        return _lib.MyVector_u64_empty(self)

    def size(self):
        return _lib.MyVector_u64_size(self)

    def swap(self, v):
        return _lib.MyVector_u64_swap(self, v)

    def begin(self):
        return _lib.MyVector_u64_begin(self)

    def end(self):
        return _lib.MyVector_u64_end(self)

    def rbegin(self):
        return _lib.MyVector_u64_rbegin(self)

    def rend(self):
        return _lib.MyVector_u64_rend(self)

    def clear(self):
        return _lib.MyVector_u64_clear(self)

    def get_allocator(self):
        return _lib.MyVector_u64_get_allocator(self)

    def pop_back(self):
        return _lib.MyVector_u64_pop_back(self)

    def erase(self, *args):
        return _lib.MyVector_u64_erase(self, *args)

    def __init__(self, *args):
        _lib.MyVector_u64_swiginit(self, _lib.new_MyVector_u64(*args))

    def push_back(self, x):
        return _lib.MyVector_u64_push_back(self, x)

    def front(self):
        return _lib.MyVector_u64_front(self)

    def back(self):
        return _lib.MyVector_u64_back(self)

    def assign(self, n, x):
        return _lib.MyVector_u64_assign(self, n, x)

    def resize(self, *args):
        return _lib.MyVector_u64_resize(self, *args)

    def insert(self, *args):
        return _lib.MyVector_u64_insert(self, *args)

    def reserve(self, n):
        return _lib.MyVector_u64_reserve(self, n)

    def capacity(self):
        return _lib.MyVector_u64_capacity(self)
    __swig_destroy__ = _lib.delete_MyVector_u64

# Register MyVector_u64 in _lib:
_lib.MyVector_u64_swigregister(MyVector_u64)

class MyVector_u32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _lib.MyVector_u32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lib.MyVector_u32___nonzero__(self)

    def __bool__(self):
        return _lib.MyVector_u32___bool__(self)

    def __len__(self):
        return _lib.MyVector_u32___len__(self)

    def __getslice__(self, i, j):
        return _lib.MyVector_u32___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _lib.MyVector_u32___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _lib.MyVector_u32___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _lib.MyVector_u32___delitem__(self, *args)

    def __getitem__(self, *args):
        return _lib.MyVector_u32___getitem__(self, *args)

    def __setitem__(self, *args):
        return _lib.MyVector_u32___setitem__(self, *args)

    def pop(self):
        return _lib.MyVector_u32_pop(self)

    def append(self, x):
        return _lib.MyVector_u32_append(self, x)

    def empty(self):
        return _lib.MyVector_u32_empty(self)

    def size(self):
        return _lib.MyVector_u32_size(self)

    def swap(self, v):
        return _lib.MyVector_u32_swap(self, v)

    def begin(self):
        return _lib.MyVector_u32_begin(self)

    def end(self):
        return _lib.MyVector_u32_end(self)

    def rbegin(self):
        return _lib.MyVector_u32_rbegin(self)

    def rend(self):
        return _lib.MyVector_u32_rend(self)

    def clear(self):
        return _lib.MyVector_u32_clear(self)

    def get_allocator(self):
        return _lib.MyVector_u32_get_allocator(self)

    def pop_back(self):
        return _lib.MyVector_u32_pop_back(self)

    def erase(self, *args):
        return _lib.MyVector_u32_erase(self, *args)

    def __init__(self, *args):
        _lib.MyVector_u32_swiginit(self, _lib.new_MyVector_u32(*args))

    def push_back(self, x):
        return _lib.MyVector_u32_push_back(self, x)

    def front(self):
        return _lib.MyVector_u32_front(self)

    def back(self):
        return _lib.MyVector_u32_back(self)

    def assign(self, n, x):
        return _lib.MyVector_u32_assign(self, n, x)

    def resize(self, *args):
        return _lib.MyVector_u32_resize(self, *args)

    def insert(self, *args):
        return _lib.MyVector_u32_insert(self, *args)

    def reserve(self, n):
        return _lib.MyVector_u32_reserve(self, n)

    def capacity(self):
        return _lib.MyVector_u32_capacity(self)
    __swig_destroy__ = _lib.delete_MyVector_u32

# Register MyVector_u32 in _lib:
_lib.MyVector_u32_swigregister(MyVector_u32)

class MyVector_u16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _lib.MyVector_u16_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lib.MyVector_u16___nonzero__(self)

    def __bool__(self):
        return _lib.MyVector_u16___bool__(self)

    def __len__(self):
        return _lib.MyVector_u16___len__(self)

    def __getslice__(self, i, j):
        return _lib.MyVector_u16___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _lib.MyVector_u16___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _lib.MyVector_u16___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _lib.MyVector_u16___delitem__(self, *args)

    def __getitem__(self, *args):
        return _lib.MyVector_u16___getitem__(self, *args)

    def __setitem__(self, *args):
        return _lib.MyVector_u16___setitem__(self, *args)

    def pop(self):
        return _lib.MyVector_u16_pop(self)

    def append(self, x):
        return _lib.MyVector_u16_append(self, x)

    def empty(self):
        return _lib.MyVector_u16_empty(self)

    def size(self):
        return _lib.MyVector_u16_size(self)

    def swap(self, v):
        return _lib.MyVector_u16_swap(self, v)

    def begin(self):
        return _lib.MyVector_u16_begin(self)

    def end(self):
        return _lib.MyVector_u16_end(self)

    def rbegin(self):
        return _lib.MyVector_u16_rbegin(self)

    def rend(self):
        return _lib.MyVector_u16_rend(self)

    def clear(self):
        return _lib.MyVector_u16_clear(self)

    def get_allocator(self):
        return _lib.MyVector_u16_get_allocator(self)

    def pop_back(self):
        return _lib.MyVector_u16_pop_back(self)

    def erase(self, *args):
        return _lib.MyVector_u16_erase(self, *args)

    def __init__(self, *args):
        _lib.MyVector_u16_swiginit(self, _lib.new_MyVector_u16(*args))

    def push_back(self, x):
        return _lib.MyVector_u16_push_back(self, x)

    def front(self):
        return _lib.MyVector_u16_front(self)

    def back(self):
        return _lib.MyVector_u16_back(self)

    def assign(self, n, x):
        return _lib.MyVector_u16_assign(self, n, x)

    def resize(self, *args):
        return _lib.MyVector_u16_resize(self, *args)

    def insert(self, *args):
        return _lib.MyVector_u16_insert(self, *args)

    def reserve(self, n):
        return _lib.MyVector_u16_reserve(self, n)

    def capacity(self):
        return _lib.MyVector_u16_capacity(self)
    __swig_destroy__ = _lib.delete_MyVector_u16

# Register MyVector_u16 in _lib:
_lib.MyVector_u16_swigregister(MyVector_u16)

class MyVector_u8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _lib.MyVector_u8_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lib.MyVector_u8___nonzero__(self)

    def __bool__(self):
        return _lib.MyVector_u8___bool__(self)

    def __len__(self):
        return _lib.MyVector_u8___len__(self)

    def __getslice__(self, i, j):
        return _lib.MyVector_u8___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _lib.MyVector_u8___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _lib.MyVector_u8___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _lib.MyVector_u8___delitem__(self, *args)

    def __getitem__(self, *args):
        return _lib.MyVector_u8___getitem__(self, *args)

    def __setitem__(self, *args):
        return _lib.MyVector_u8___setitem__(self, *args)

    def pop(self):
        return _lib.MyVector_u8_pop(self)

    def append(self, x):
        return _lib.MyVector_u8_append(self, x)

    def empty(self):
        return _lib.MyVector_u8_empty(self)

    def size(self):
        return _lib.MyVector_u8_size(self)

    def swap(self, v):
        return _lib.MyVector_u8_swap(self, v)

    def begin(self):
        return _lib.MyVector_u8_begin(self)

    def end(self):
        return _lib.MyVector_u8_end(self)

    def rbegin(self):
        return _lib.MyVector_u8_rbegin(self)

    def rend(self):
        return _lib.MyVector_u8_rend(self)

    def clear(self):
        return _lib.MyVector_u8_clear(self)

    def get_allocator(self):
        return _lib.MyVector_u8_get_allocator(self)

    def pop_back(self):
        return _lib.MyVector_u8_pop_back(self)

    def erase(self, *args):
        return _lib.MyVector_u8_erase(self, *args)

    def __init__(self, *args):
        _lib.MyVector_u8_swiginit(self, _lib.new_MyVector_u8(*args))

    def push_back(self, x):
        return _lib.MyVector_u8_push_back(self, x)

    def front(self):
        return _lib.MyVector_u8_front(self)

    def back(self):
        return _lib.MyVector_u8_back(self)

    def assign(self, n, x):
        return _lib.MyVector_u8_assign(self, n, x)

    def resize(self, *args):
        return _lib.MyVector_u8_resize(self, *args)

    def insert(self, *args):
        return _lib.MyVector_u8_insert(self, *args)

    def reserve(self, n):
        return _lib.MyVector_u8_reserve(self, n)

    def capacity(self):
        return _lib.MyVector_u8_capacity(self)
    __swig_destroy__ = _lib.delete_MyVector_u8

# Register MyVector_u8 in _lib:
_lib.MyVector_u8_swigregister(MyVector_u8)

class MyVectorVector_u8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _lib.MyVectorVector_u8_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lib.MyVectorVector_u8___nonzero__(self)

    def __bool__(self):
        return _lib.MyVectorVector_u8___bool__(self)

    def __len__(self):
        return _lib.MyVectorVector_u8___len__(self)

    def __getslice__(self, i, j):
        return _lib.MyVectorVector_u8___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _lib.MyVectorVector_u8___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _lib.MyVectorVector_u8___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _lib.MyVectorVector_u8___delitem__(self, *args)

    def __getitem__(self, *args):
        return _lib.MyVectorVector_u8___getitem__(self, *args)

    def __setitem__(self, *args):
        return _lib.MyVectorVector_u8___setitem__(self, *args)

    def pop(self):
        return _lib.MyVectorVector_u8_pop(self)

    def append(self, x):
        return _lib.MyVectorVector_u8_append(self, x)

    def empty(self):
        return _lib.MyVectorVector_u8_empty(self)

    def size(self):
        return _lib.MyVectorVector_u8_size(self)

    def swap(self, v):
        return _lib.MyVectorVector_u8_swap(self, v)

    def begin(self):
        return _lib.MyVectorVector_u8_begin(self)

    def end(self):
        return _lib.MyVectorVector_u8_end(self)

    def rbegin(self):
        return _lib.MyVectorVector_u8_rbegin(self)

    def rend(self):
        return _lib.MyVectorVector_u8_rend(self)

    def clear(self):
        return _lib.MyVectorVector_u8_clear(self)

    def get_allocator(self):
        return _lib.MyVectorVector_u8_get_allocator(self)

    def pop_back(self):
        return _lib.MyVectorVector_u8_pop_back(self)

    def erase(self, *args):
        return _lib.MyVectorVector_u8_erase(self, *args)

    def __init__(self, *args):
        _lib.MyVectorVector_u8_swiginit(self, _lib.new_MyVectorVector_u8(*args))

    def push_back(self, x):
        return _lib.MyVectorVector_u8_push_back(self, x)

    def front(self):
        return _lib.MyVectorVector_u8_front(self)

    def back(self):
        return _lib.MyVectorVector_u8_back(self)

    def assign(self, n, x):
        return _lib.MyVectorVector_u8_assign(self, n, x)

    def resize(self, *args):
        return _lib.MyVectorVector_u8_resize(self, *args)

    def insert(self, *args):
        return _lib.MyVectorVector_u8_insert(self, *args)

    def reserve(self, n):
        return _lib.MyVectorVector_u8_reserve(self, n)

    def capacity(self):
        return _lib.MyVectorVector_u8_capacity(self)
    __swig_destroy__ = _lib.delete_MyVectorVector_u8

# Register MyVectorVector_u8 in _lib:
_lib.MyVectorVector_u8_swigregister(MyVectorVector_u8)

class MyVector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _lib.MyVector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lib.MyVector_int___nonzero__(self)

    def __bool__(self):
        return _lib.MyVector_int___bool__(self)

    def __len__(self):
        return _lib.MyVector_int___len__(self)

    def __getslice__(self, i, j):
        return _lib.MyVector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _lib.MyVector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _lib.MyVector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _lib.MyVector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _lib.MyVector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _lib.MyVector_int___setitem__(self, *args)

    def pop(self):
        return _lib.MyVector_int_pop(self)

    def append(self, x):
        return _lib.MyVector_int_append(self, x)

    def empty(self):
        return _lib.MyVector_int_empty(self)

    def size(self):
        return _lib.MyVector_int_size(self)

    def swap(self, v):
        return _lib.MyVector_int_swap(self, v)

    def begin(self):
        return _lib.MyVector_int_begin(self)

    def end(self):
        return _lib.MyVector_int_end(self)

    def rbegin(self):
        return _lib.MyVector_int_rbegin(self)

    def rend(self):
        return _lib.MyVector_int_rend(self)

    def clear(self):
        return _lib.MyVector_int_clear(self)

    def get_allocator(self):
        return _lib.MyVector_int_get_allocator(self)

    def pop_back(self):
        return _lib.MyVector_int_pop_back(self)

    def erase(self, *args):
        return _lib.MyVector_int_erase(self, *args)

    def __init__(self, *args):
        _lib.MyVector_int_swiginit(self, _lib.new_MyVector_int(*args))

    def push_back(self, x):
        return _lib.MyVector_int_push_back(self, x)

    def front(self):
        return _lib.MyVector_int_front(self)

    def back(self):
        return _lib.MyVector_int_back(self)

    def assign(self, n, x):
        return _lib.MyVector_int_assign(self, n, x)

    def resize(self, *args):
        return _lib.MyVector_int_resize(self, *args)

    def insert(self, *args):
        return _lib.MyVector_int_insert(self, *args)

    def reserve(self, n):
        return _lib.MyVector_int_reserve(self, n)

    def capacity(self):
        return _lib.MyVector_int_capacity(self)
    __swig_destroy__ = _lib.delete_MyVector_int

# Register MyVector_int in _lib:
_lib.MyVector_int_swigregister(MyVector_int)

class MySet_uint64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _lib.MySet_uint64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lib.MySet_uint64___nonzero__(self)

    def __bool__(self):
        return _lib.MySet_uint64___bool__(self)

    def __len__(self):
        return _lib.MySet_uint64___len__(self)

    def append(self, x):
        return _lib.MySet_uint64_append(self, x)

    def __contains__(self, x):
        return _lib.MySet_uint64___contains__(self, x)

    def __getitem__(self, i):
        return _lib.MySet_uint64___getitem__(self, i)

    def add(self, x):
        return _lib.MySet_uint64_add(self, x)

    def discard(self, x):
        return _lib.MySet_uint64_discard(self, x)

    def __init__(self, *args):
        _lib.MySet_uint64_swiginit(self, _lib.new_MySet_uint64(*args))

    def empty(self):
        return _lib.MySet_uint64_empty(self)

    def size(self):
        return _lib.MySet_uint64_size(self)

    def clear(self):
        return _lib.MySet_uint64_clear(self)

    def swap(self, v):
        return _lib.MySet_uint64_swap(self, v)

    def count(self, x):
        return _lib.MySet_uint64_count(self, x)

    def begin(self):
        return _lib.MySet_uint64_begin(self)

    def end(self):
        return _lib.MySet_uint64_end(self)

    def rbegin(self):
        return _lib.MySet_uint64_rbegin(self)

    def rend(self):
        return _lib.MySet_uint64_rend(self)

    def erase(self, *args):
        return _lib.MySet_uint64_erase(self, *args)

    def find(self, x):
        return _lib.MySet_uint64_find(self, x)

    def lower_bound(self, x):
        return _lib.MySet_uint64_lower_bound(self, x)

    def upper_bound(self, x):
        return _lib.MySet_uint64_upper_bound(self, x)

    def equal_range(self, x):
        return _lib.MySet_uint64_equal_range(self, x)

    def insert(self, __x):
        return _lib.MySet_uint64_insert(self, __x)
    __swig_destroy__ = _lib.delete_MySet_uint64

# Register MySet_uint64 in _lib:
_lib.MySet_uint64_swigregister(MySet_uint64)

class MyMap_PII_u64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _lib.MyMap_PII_u64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lib.MyMap_PII_u64___nonzero__(self)

    def __bool__(self):
        return _lib.MyMap_PII_u64___bool__(self)

    def __len__(self):
        return _lib.MyMap_PII_u64___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _lib.MyMap_PII_u64___getitem__(self, key)

    def __delitem__(self, key):
        return _lib.MyMap_PII_u64___delitem__(self, key)

    def has_key(self, key):
        return _lib.MyMap_PII_u64_has_key(self, key)

    def keys(self):
        return _lib.MyMap_PII_u64_keys(self)

    def values(self):
        return _lib.MyMap_PII_u64_values(self)

    def items(self):
        return _lib.MyMap_PII_u64_items(self)

    def __contains__(self, key):
        return _lib.MyMap_PII_u64___contains__(self, key)

    def key_iterator(self):
        return _lib.MyMap_PII_u64_key_iterator(self)

    def value_iterator(self):
        return _lib.MyMap_PII_u64_value_iterator(self)

    def __setitem__(self, *args):
        return _lib.MyMap_PII_u64___setitem__(self, *args)

    def asdict(self):
        return _lib.MyMap_PII_u64_asdict(self)

    def __init__(self, *args):
        _lib.MyMap_PII_u64_swiginit(self, _lib.new_MyMap_PII_u64(*args))

    def empty(self):
        return _lib.MyMap_PII_u64_empty(self)

    def size(self):
        return _lib.MyMap_PII_u64_size(self)

    def swap(self, v):
        return _lib.MyMap_PII_u64_swap(self, v)

    def begin(self):
        return _lib.MyMap_PII_u64_begin(self)

    def end(self):
        return _lib.MyMap_PII_u64_end(self)

    def rbegin(self):
        return _lib.MyMap_PII_u64_rbegin(self)

    def rend(self):
        return _lib.MyMap_PII_u64_rend(self)

    def clear(self):
        return _lib.MyMap_PII_u64_clear(self)

    def get_allocator(self):
        return _lib.MyMap_PII_u64_get_allocator(self)

    def count(self, x):
        return _lib.MyMap_PII_u64_count(self, x)

    def erase(self, *args):
        return _lib.MyMap_PII_u64_erase(self, *args)

    def find(self, x):
        return _lib.MyMap_PII_u64_find(self, x)

    def lower_bound(self, x):
        return _lib.MyMap_PII_u64_lower_bound(self, x)

    def upper_bound(self, x):
        return _lib.MyMap_PII_u64_upper_bound(self, x)
    __swig_destroy__ = _lib.delete_MyMap_PII_u64

# Register MyMap_PII_u64 in _lib:
_lib.MyMap_PII_u64_swigregister(MyMap_PII_u64)


from subsets.subsets import DenseSet


import logging
log = logging.getLogger(__name__)

class Sbox8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_lib.Sbox8_n_get, _lib.Sbox8_n_set)
    m = property(_lib.Sbox8_m_get, _lib.Sbox8_m_set)
    data = property(_lib.Sbox8_data_get, _lib.Sbox8_data_set)
    xmask = property(_lib.Sbox8_xmask_get, _lib.Sbox8_xmask_set)
    ymask = property(_lib.Sbox8_ymask_get, _lib.Sbox8_ymask_set)
    VERSION1 = _lib.Sbox8_VERSION1
    MARKER_END = _lib.Sbox8_MARKER_END
    ENTRY_SIZE = _lib.Sbox8_ENTRY_SIZE
    is_Sbox_class = _lib.Sbox8_is_Sbox_class

    @classmethod
    def __instancecheck__(cls, inst):
        return getattr(inst, "is_Sbox_class", False)


    def __init__(self, *args):
        _lib.Sbox8_swiginit(self, _lib.new_Sbox8(*args))

    def init(self):
        return _lib.Sbox8_init(self)

    def get_hash(self):
        return _lib.Sbox8_get_hash(self)

    def info(self):
        return _lib.Sbox8_info(self)

    def invert_in_place(self):
        return _lib.Sbox8_invert_in_place(self)

    def inverse(self):
        return _lib.Sbox8_inverse(self)

    def get(self, x):
        return _lib.Sbox8_get(self, x)

    def set(self, x, y):
        return _lib.Sbox8_set(self, x, y)

    def coordinate_product(self, mask):
        return _lib.Sbox8_coordinate_product(self, mask)

    def graph_dense(self):
        return _lib.Sbox8_graph_dense(self)

    def coordinates(self):
        return _lib.Sbox8_coordinates(self)

    def coordinate(self, i):
        return _lib.Sbox8_coordinate(self, i)

    def to_matrix(self):
        return _lib.Sbox8_to_matrix(self)

    def is_invertible(self):
        return _lib.Sbox8_is_invertible(self)

    @staticmethod
    def GEN_random_permutation(*args):
        return _lib.Sbox8_GEN_random_permutation(*args)

    def save_to_file(self, filename):
        return _lib.Sbox8_save_to_file(self, filename)

    @staticmethod
    def load_from_file(filename):
        return _lib.Sbox8_load_from_file(filename)

    def __str__(self):
        return self.info()
    def __repr__(self):
        return self.info()
    def __invert__(self):
        return self.inverse()
    def __getitem__(self, x):
        return self.get(int(x))
    def __setitem__(self, x, v):
        return self.set(int(x), int(v))
    def __len__(self):
        return len(self.data)
    def __iter__(self):
        return iter(self.data)

    def __getstate__(self):
        return self.n, self.m, list(self.data)

    def __setstate__(self, st):
        n, m, data = st
        self.__init__(data, n, m)
        return self

    __swig_destroy__ = _lib.delete_Sbox8

# Register Sbox8 in _lib:
_lib.Sbox8_swigregister(Sbox8)

def Sbox8_GEN_random_permutation(*args):
    return _lib.Sbox8_GEN_random_permutation(*args)

def Sbox8_load_from_file(filename):
    return _lib.Sbox8_load_from_file(filename)

class Sbox16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_lib.Sbox16_n_get, _lib.Sbox16_n_set)
    m = property(_lib.Sbox16_m_get, _lib.Sbox16_m_set)
    data = property(_lib.Sbox16_data_get, _lib.Sbox16_data_set)
    xmask = property(_lib.Sbox16_xmask_get, _lib.Sbox16_xmask_set)
    ymask = property(_lib.Sbox16_ymask_get, _lib.Sbox16_ymask_set)
    VERSION1 = _lib.Sbox16_VERSION1
    MARKER_END = _lib.Sbox16_MARKER_END
    ENTRY_SIZE = _lib.Sbox16_ENTRY_SIZE
    is_Sbox_class = _lib.Sbox16_is_Sbox_class

    @classmethod
    def __instancecheck__(cls, inst):
        return getattr(inst, "is_Sbox_class", False)


    def __init__(self, *args):
        _lib.Sbox16_swiginit(self, _lib.new_Sbox16(*args))

    def init(self):
        return _lib.Sbox16_init(self)

    def get_hash(self):
        return _lib.Sbox16_get_hash(self)

    def info(self):
        return _lib.Sbox16_info(self)

    def invert_in_place(self):
        return _lib.Sbox16_invert_in_place(self)

    def inverse(self):
        return _lib.Sbox16_inverse(self)

    def get(self, x):
        return _lib.Sbox16_get(self, x)

    def set(self, x, y):
        return _lib.Sbox16_set(self, x, y)

    def coordinate_product(self, mask):
        return _lib.Sbox16_coordinate_product(self, mask)

    def graph_dense(self):
        return _lib.Sbox16_graph_dense(self)

    def coordinates(self):
        return _lib.Sbox16_coordinates(self)

    def coordinate(self, i):
        return _lib.Sbox16_coordinate(self, i)

    def to_matrix(self):
        return _lib.Sbox16_to_matrix(self)

    def is_invertible(self):
        return _lib.Sbox16_is_invertible(self)

    @staticmethod
    def GEN_random_permutation(*args):
        return _lib.Sbox16_GEN_random_permutation(*args)

    def save_to_file(self, filename):
        return _lib.Sbox16_save_to_file(self, filename)

    @staticmethod
    def load_from_file(filename):
        return _lib.Sbox16_load_from_file(filename)

    def __str__(self):
        return self.info()
    def __repr__(self):
        return self.info()
    def __invert__(self):
        return self.inverse()
    def __getitem__(self, x):
        return self.get(int(x))
    def __setitem__(self, x, v):
        return self.set(int(x), int(v))
    def __len__(self):
        return len(self.data)
    def __iter__(self):
        return iter(self.data)

    def __getstate__(self):
        return self.n, self.m, list(self.data)

    def __setstate__(self, st):
        n, m, data = st
        self.__init__(data, n, m)
        return self

    __swig_destroy__ = _lib.delete_Sbox16

# Register Sbox16 in _lib:
_lib.Sbox16_swigregister(Sbox16)

def Sbox16_GEN_random_permutation(*args):
    return _lib.Sbox16_GEN_random_permutation(*args)

def Sbox16_load_from_file(filename):
    return _lib.Sbox16_load_from_file(filename)

class Sbox32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_lib.Sbox32_n_get, _lib.Sbox32_n_set)
    m = property(_lib.Sbox32_m_get, _lib.Sbox32_m_set)
    data = property(_lib.Sbox32_data_get, _lib.Sbox32_data_set)
    xmask = property(_lib.Sbox32_xmask_get, _lib.Sbox32_xmask_set)
    ymask = property(_lib.Sbox32_ymask_get, _lib.Sbox32_ymask_set)
    VERSION1 = _lib.Sbox32_VERSION1
    MARKER_END = _lib.Sbox32_MARKER_END
    ENTRY_SIZE = _lib.Sbox32_ENTRY_SIZE
    is_Sbox_class = _lib.Sbox32_is_Sbox_class

    @classmethod
    def __instancecheck__(cls, inst):
        return getattr(inst, "is_Sbox_class", False)


    def __init__(self, *args):
        _lib.Sbox32_swiginit(self, _lib.new_Sbox32(*args))

    def init(self):
        return _lib.Sbox32_init(self)

    def get_hash(self):
        return _lib.Sbox32_get_hash(self)

    def info(self):
        return _lib.Sbox32_info(self)

    def invert_in_place(self):
        return _lib.Sbox32_invert_in_place(self)

    def inverse(self):
        return _lib.Sbox32_inverse(self)

    def get(self, x):
        return _lib.Sbox32_get(self, x)

    def set(self, x, y):
        return _lib.Sbox32_set(self, x, y)

    def coordinate_product(self, mask):
        return _lib.Sbox32_coordinate_product(self, mask)

    def graph_dense(self):
        return _lib.Sbox32_graph_dense(self)

    def coordinates(self):
        return _lib.Sbox32_coordinates(self)

    def coordinate(self, i):
        return _lib.Sbox32_coordinate(self, i)

    def to_matrix(self):
        return _lib.Sbox32_to_matrix(self)

    def is_invertible(self):
        return _lib.Sbox32_is_invertible(self)

    @staticmethod
    def GEN_random_permutation(*args):
        return _lib.Sbox32_GEN_random_permutation(*args)

    def save_to_file(self, filename):
        return _lib.Sbox32_save_to_file(self, filename)

    @staticmethod
    def load_from_file(filename):
        return _lib.Sbox32_load_from_file(filename)

    def __str__(self):
        return self.info()
    def __repr__(self):
        return self.info()
    def __invert__(self):
        return self.inverse()
    def __getitem__(self, x):
        return self.get(int(x))
    def __setitem__(self, x, v):
        return self.set(int(x), int(v))
    def __len__(self):
        return len(self.data)
    def __iter__(self):
        return iter(self.data)

    def __getstate__(self):
        return self.n, self.m, list(self.data)

    def __setstate__(self, st):
        n, m, data = st
        self.__init__(data, n, m)
        return self

    __swig_destroy__ = _lib.delete_Sbox32

# Register Sbox32 in _lib:
_lib.Sbox32_swigregister(Sbox32)

def Sbox32_GEN_random_permutation(*args):
    return _lib.Sbox32_GEN_random_permutation(*args)

def Sbox32_load_from_file(filename):
    return _lib.Sbox32_load_from_file(filename)

class Sbox64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_lib.Sbox64_n_get, _lib.Sbox64_n_set)
    m = property(_lib.Sbox64_m_get, _lib.Sbox64_m_set)
    data = property(_lib.Sbox64_data_get, _lib.Sbox64_data_set)
    xmask = property(_lib.Sbox64_xmask_get, _lib.Sbox64_xmask_set)
    ymask = property(_lib.Sbox64_ymask_get, _lib.Sbox64_ymask_set)
    VERSION1 = _lib.Sbox64_VERSION1
    MARKER_END = _lib.Sbox64_MARKER_END
    ENTRY_SIZE = _lib.Sbox64_ENTRY_SIZE
    is_Sbox_class = _lib.Sbox64_is_Sbox_class

    @classmethod
    def __instancecheck__(cls, inst):
        return getattr(inst, "is_Sbox_class", False)


    def __init__(self, *args):
        _lib.Sbox64_swiginit(self, _lib.new_Sbox64(*args))

    def init(self):
        return _lib.Sbox64_init(self)

    def get_hash(self):
        return _lib.Sbox64_get_hash(self)

    def info(self):
        return _lib.Sbox64_info(self)

    def invert_in_place(self):
        return _lib.Sbox64_invert_in_place(self)

    def inverse(self):
        return _lib.Sbox64_inverse(self)

    def get(self, x):
        return _lib.Sbox64_get(self, x)

    def set(self, x, y):
        return _lib.Sbox64_set(self, x, y)

    def coordinate_product(self, mask):
        return _lib.Sbox64_coordinate_product(self, mask)

    def graph_dense(self):
        return _lib.Sbox64_graph_dense(self)

    def coordinates(self):
        return _lib.Sbox64_coordinates(self)

    def coordinate(self, i):
        return _lib.Sbox64_coordinate(self, i)

    def to_matrix(self):
        return _lib.Sbox64_to_matrix(self)

    def is_invertible(self):
        return _lib.Sbox64_is_invertible(self)

    @staticmethod
    def GEN_random_permutation(*args):
        return _lib.Sbox64_GEN_random_permutation(*args)

    def save_to_file(self, filename):
        return _lib.Sbox64_save_to_file(self, filename)

    @staticmethod
    def load_from_file(filename):
        return _lib.Sbox64_load_from_file(filename)

    def __str__(self):
        return self.info()
    def __repr__(self):
        return self.info()
    def __invert__(self):
        return self.inverse()
    def __getitem__(self, x):
        return self.get(int(x))
    def __setitem__(self, x, v):
        return self.set(int(x), int(v))
    def __len__(self):
        return len(self.data)
    def __iter__(self):
        return iter(self.data)

    def __getstate__(self):
        return self.n, self.m, list(self.data)

    def __setstate__(self, st):
        n, m, data = st
        self.__init__(data, n, m)
        return self

    __swig_destroy__ = _lib.delete_Sbox64

# Register Sbox64 in _lib:
_lib.Sbox64_swigregister(Sbox64)

def Sbox64_GEN_random_permutation(*args):
    return _lib.Sbox64_GEN_random_permutation(*args)

def Sbox64_load_from_file(filename):
    return _lib.Sbox64_load_from_file(filename)


class Sbox(Sbox64):
    classes = Sbox8, Sbox16, Sbox32, Sbox64

    def __new__(cls, data, n=None, m=None):
        if n is None:
            n = len(data)
        if m is None:
            m = int(max(data)).bit_length()

        assert len(data) == 1 << n
        assert 0 <= min(data) <= max(data) < 1 << m

        if m <= 8:
            cls = Sbox8
        elif m <= 16:
            cls = Sbox16
        elif m <= 32:
            cls = Sbox32
        elif m <= 64:
            cls = Sbox64
        else:
            raise TypeError("too large values")
        return cls(data, n, m)

class DivCore_StrongComposition8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_lib.DivCore_StrongComposition8_n_get, _lib.DivCore_StrongComposition8_n_set)
    r = property(_lib.DivCore_StrongComposition8_r_get, _lib.DivCore_StrongComposition8_r_set)
    m = property(_lib.DivCore_StrongComposition8_m_get, _lib.DivCore_StrongComposition8_m_set)
    current = property(_lib.DivCore_StrongComposition8_current_get, _lib.DivCore_StrongComposition8_current_set)
    tab1 = property(_lib.DivCore_StrongComposition8_tab1_get, _lib.DivCore_StrongComposition8_tab1_set)
    tab2 = property(_lib.DivCore_StrongComposition8_tab2_get, _lib.DivCore_StrongComposition8_tab2_set)
    keys_left = property(_lib.DivCore_StrongComposition8_keys_left_get, _lib.DivCore_StrongComposition8_keys_left_set)
    _ones = property(_lib.DivCore_StrongComposition8__ones_get, _lib.DivCore_StrongComposition8__ones_set)
    divcore = property(_lib.DivCore_StrongComposition8_divcore_get, _lib.DivCore_StrongComposition8_divcore_set)

    def __init__(self, _n, _r, _m, _tab1, _tab2):
        _lib.DivCore_StrongComposition8_swiginit(self, _lib.new_DivCore_StrongComposition8(_n, _r, _m, _tab1, _tab2))

    def set_keys(self, keys):
        return _lib.DivCore_StrongComposition8_set_keys(self, keys)

    def process_logged(self, chunk=128):
        nkeys = 2**self.r
        ntotal = len(self.keys_left)
        while len(self.keys_left):
            self.process(chunk)
            proc = ntotal - len(self.keys_left)
            log.info(f"processed {proc}/{ntotal} keys")


    def shuffle(self):
        return _lib.DivCore_StrongComposition8_shuffle(self)

    def process(self, *args):
        return _lib.DivCore_StrongComposition8_process(self, *args)

    def _process_key(self, key):
        return _lib.DivCore_StrongComposition8__process_key(self, key)

    def _finalize(self):
        return _lib.DivCore_StrongComposition8__finalize(self)
    __swig_destroy__ = _lib.delete_DivCore_StrongComposition8

# Register DivCore_StrongComposition8 in _lib:
_lib.DivCore_StrongComposition8_swigregister(DivCore_StrongComposition8)

class DivCore_StrongComposition16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_lib.DivCore_StrongComposition16_n_get, _lib.DivCore_StrongComposition16_n_set)
    r = property(_lib.DivCore_StrongComposition16_r_get, _lib.DivCore_StrongComposition16_r_set)
    m = property(_lib.DivCore_StrongComposition16_m_get, _lib.DivCore_StrongComposition16_m_set)
    current = property(_lib.DivCore_StrongComposition16_current_get, _lib.DivCore_StrongComposition16_current_set)
    tab1 = property(_lib.DivCore_StrongComposition16_tab1_get, _lib.DivCore_StrongComposition16_tab1_set)
    tab2 = property(_lib.DivCore_StrongComposition16_tab2_get, _lib.DivCore_StrongComposition16_tab2_set)
    keys_left = property(_lib.DivCore_StrongComposition16_keys_left_get, _lib.DivCore_StrongComposition16_keys_left_set)
    _ones = property(_lib.DivCore_StrongComposition16__ones_get, _lib.DivCore_StrongComposition16__ones_set)
    divcore = property(_lib.DivCore_StrongComposition16_divcore_get, _lib.DivCore_StrongComposition16_divcore_set)

    def __init__(self, _n, _r, _m, _tab1, _tab2):
        _lib.DivCore_StrongComposition16_swiginit(self, _lib.new_DivCore_StrongComposition16(_n, _r, _m, _tab1, _tab2))

    def set_keys(self, keys):
        return _lib.DivCore_StrongComposition16_set_keys(self, keys)

    def process_logged(self, chunk=128):
        nkeys = 2**self.r
        ntotal = len(self.keys_left)
        while len(self.keys_left):
            self.process(chunk)
            proc = ntotal - len(self.keys_left)
            log.info(f"processed {proc}/{ntotal} keys")


    def shuffle(self):
        return _lib.DivCore_StrongComposition16_shuffle(self)

    def process(self, *args):
        return _lib.DivCore_StrongComposition16_process(self, *args)

    def _process_key(self, key):
        return _lib.DivCore_StrongComposition16__process_key(self, key)

    def _finalize(self):
        return _lib.DivCore_StrongComposition16__finalize(self)
    __swig_destroy__ = _lib.delete_DivCore_StrongComposition16

# Register DivCore_StrongComposition16 in _lib:
_lib.DivCore_StrongComposition16_swigregister(DivCore_StrongComposition16)

class DivCore_StrongComposition32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_lib.DivCore_StrongComposition32_n_get, _lib.DivCore_StrongComposition32_n_set)
    r = property(_lib.DivCore_StrongComposition32_r_get, _lib.DivCore_StrongComposition32_r_set)
    m = property(_lib.DivCore_StrongComposition32_m_get, _lib.DivCore_StrongComposition32_m_set)
    current = property(_lib.DivCore_StrongComposition32_current_get, _lib.DivCore_StrongComposition32_current_set)
    tab1 = property(_lib.DivCore_StrongComposition32_tab1_get, _lib.DivCore_StrongComposition32_tab1_set)
    tab2 = property(_lib.DivCore_StrongComposition32_tab2_get, _lib.DivCore_StrongComposition32_tab2_set)
    keys_left = property(_lib.DivCore_StrongComposition32_keys_left_get, _lib.DivCore_StrongComposition32_keys_left_set)
    _ones = property(_lib.DivCore_StrongComposition32__ones_get, _lib.DivCore_StrongComposition32__ones_set)
    divcore = property(_lib.DivCore_StrongComposition32_divcore_get, _lib.DivCore_StrongComposition32_divcore_set)

    def __init__(self, _n, _r, _m, _tab1, _tab2):
        _lib.DivCore_StrongComposition32_swiginit(self, _lib.new_DivCore_StrongComposition32(_n, _r, _m, _tab1, _tab2))

    def set_keys(self, keys):
        return _lib.DivCore_StrongComposition32_set_keys(self, keys)

    def process_logged(self, chunk=128):
        nkeys = 2**self.r
        ntotal = len(self.keys_left)
        while len(self.keys_left):
            self.process(chunk)
            proc = ntotal - len(self.keys_left)
            log.info(f"processed {proc}/{ntotal} keys")


    def shuffle(self):
        return _lib.DivCore_StrongComposition32_shuffle(self)

    def process(self, *args):
        return _lib.DivCore_StrongComposition32_process(self, *args)

    def _process_key(self, key):
        return _lib.DivCore_StrongComposition32__process_key(self, key)

    def _finalize(self):
        return _lib.DivCore_StrongComposition32__finalize(self)
    __swig_destroy__ = _lib.delete_DivCore_StrongComposition32

# Register DivCore_StrongComposition32 in _lib:
_lib.DivCore_StrongComposition32_swigregister(DivCore_StrongComposition32)

class DivCore_StrongComposition64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_lib.DivCore_StrongComposition64_n_get, _lib.DivCore_StrongComposition64_n_set)
    r = property(_lib.DivCore_StrongComposition64_r_get, _lib.DivCore_StrongComposition64_r_set)
    m = property(_lib.DivCore_StrongComposition64_m_get, _lib.DivCore_StrongComposition64_m_set)
    current = property(_lib.DivCore_StrongComposition64_current_get, _lib.DivCore_StrongComposition64_current_set)
    tab1 = property(_lib.DivCore_StrongComposition64_tab1_get, _lib.DivCore_StrongComposition64_tab1_set)
    tab2 = property(_lib.DivCore_StrongComposition64_tab2_get, _lib.DivCore_StrongComposition64_tab2_set)
    keys_left = property(_lib.DivCore_StrongComposition64_keys_left_get, _lib.DivCore_StrongComposition64_keys_left_set)
    _ones = property(_lib.DivCore_StrongComposition64__ones_get, _lib.DivCore_StrongComposition64__ones_set)
    divcore = property(_lib.DivCore_StrongComposition64_divcore_get, _lib.DivCore_StrongComposition64_divcore_set)

    def __init__(self, _n, _r, _m, _tab1, _tab2):
        _lib.DivCore_StrongComposition64_swiginit(self, _lib.new_DivCore_StrongComposition64(_n, _r, _m, _tab1, _tab2))

    def set_keys(self, keys):
        return _lib.DivCore_StrongComposition64_set_keys(self, keys)

    def process_logged(self, chunk=128):
        nkeys = 2**self.r
        ntotal = len(self.keys_left)
        while len(self.keys_left):
            self.process(chunk)
            proc = ntotal - len(self.keys_left)
            log.info(f"processed {proc}/{ntotal} keys")


    def shuffle(self):
        return _lib.DivCore_StrongComposition64_shuffle(self)

    def process(self, *args):
        return _lib.DivCore_StrongComposition64_process(self, *args)

    def _process_key(self, key):
        return _lib.DivCore_StrongComposition64__process_key(self, key)

    def _finalize(self):
        return _lib.DivCore_StrongComposition64__finalize(self)
    __swig_destroy__ = _lib.delete_DivCore_StrongComposition64

# Register DivCore_StrongComposition64 in _lib:
_lib.DivCore_StrongComposition64_swigregister(DivCore_StrongComposition64)


DivCore_StrongComposition = DivCore_StrongComposition32

class Vec_DenseSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _lib.Vec_DenseSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _lib.Vec_DenseSet___nonzero__(self)

    def __bool__(self):
        return _lib.Vec_DenseSet___bool__(self)

    def __len__(self):
        return _lib.Vec_DenseSet___len__(self)

    def __getslice__(self, i, j):
        return _lib.Vec_DenseSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _lib.Vec_DenseSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _lib.Vec_DenseSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _lib.Vec_DenseSet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _lib.Vec_DenseSet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _lib.Vec_DenseSet___setitem__(self, *args)

    def pop(self):
        return _lib.Vec_DenseSet_pop(self)

    def append(self, x):
        return _lib.Vec_DenseSet_append(self, x)

    def empty(self):
        return _lib.Vec_DenseSet_empty(self)

    def size(self):
        return _lib.Vec_DenseSet_size(self)

    def swap(self, v):
        return _lib.Vec_DenseSet_swap(self, v)

    def begin(self):
        return _lib.Vec_DenseSet_begin(self)

    def end(self):
        return _lib.Vec_DenseSet_end(self)

    def rbegin(self):
        return _lib.Vec_DenseSet_rbegin(self)

    def rend(self):
        return _lib.Vec_DenseSet_rend(self)

    def clear(self):
        return _lib.Vec_DenseSet_clear(self)

    def get_allocator(self):
        return _lib.Vec_DenseSet_get_allocator(self)

    def pop_back(self):
        return _lib.Vec_DenseSet_pop_back(self)

    def erase(self, *args):
        return _lib.Vec_DenseSet_erase(self, *args)

    def __init__(self, *args):
        _lib.Vec_DenseSet_swiginit(self, _lib.new_Vec_DenseSet(*args))

    def push_back(self, x):
        return _lib.Vec_DenseSet_push_back(self, x)

    def front(self):
        return _lib.Vec_DenseSet_front(self)

    def back(self):
        return _lib.Vec_DenseSet_back(self)

    def assign(self, n, x):
        return _lib.Vec_DenseSet_assign(self, n, x)

    def resize(self, *args):
        return _lib.Vec_DenseSet_resize(self, *args)

    def insert(self, *args):
        return _lib.Vec_DenseSet_insert(self, *args)

    def reserve(self, n):
        return _lib.Vec_DenseSet_reserve(self, n)

    def capacity(self):
        return _lib.Vec_DenseSet_capacity(self)
    __swig_destroy__ = _lib.delete_Vec_DenseSet

# Register Vec_DenseSet in _lib:
_lib.Vec_DenseSet_swigregister(Vec_DenseSet)



